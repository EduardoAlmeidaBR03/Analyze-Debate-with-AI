import requests
import json

# URL da API local
API_URL = "http://localhost:5000"

def test_api():
    """Testa a API com um v√≠deo do YouTube"""
    
    # Exemplo de URL do YouTube (substitua por uma URL real)
    youtube_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # Rick Roll como exemplo
    
    # Dados para enviar
    data = {
        "youtube_url": youtube_url
    }
    
    try:
        # Fazer requisi√ß√£o para a API
        response = requests.post(f"{API_URL}/analyze-youtube", json=data)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ An√°lise realizada com sucesso!")
            print(f"Status: {result['status']}")
            print(f"T√≠tulo: {result.get('video_info', {}).get('title', 'N/A')}")
            print(f"Autor: {result.get('video_info', {}).get('author', 'N/A')}")
            print(f"Fonte da transcri√ß√£o: {result.get('transcript_source', 'N/A')}")
            print(f"Tamanho da transcri√ß√£o: {result.get('transcript_length', 0)} caracteres")
            print(f"Idiomas dispon√≠veis: {len(result.get('available_transcripts', []))}")
            print("\nüìä An√°lise do Gemini:")
            print(result.get('analysis', 'An√°lise n√£o dispon√≠vel'))
        else:
            print(f"‚ùå Erro na requisi√ß√£o: {response.status_code}")
            print(response.json())
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar √† API. Certifique-se de que ela est√° rodando.")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

def test_transcript_only():
    """Testa endpoint de transcri√ß√£o apenas"""
    video_id = "dQw4w9WgXcQ"  # Rick Roll
    
    try:
        response = requests.get(f"{API_URL}/transcript-only/{video_id}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Transcri√ß√£o obtida com sucesso!")
            print(f"Video ID: {result['video_id']}")
            print(f"Tamanho da transcri√ß√£o: {result['transcript_length']} caracteres")
            print(f"Idiomas dispon√≠veis: {len(result.get('available_transcripts', []))}")
            print(f"Transcri√ß√£o (primeiros 200 chars): {result['transcript'][:200]}...")
        else:
            print(f"‚ùå Erro na requisi√ß√£o de transcri√ß√£o: {response.status_code}")
            print(response.json())
            
    except requests.exceptions.ConnectionError:
        print("‚ùå API n√£o est√° rodando.")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

def test_health():
    """Testa se a API est√° funcionando"""
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API est√° funcionando!")
            result = response.json()
            print(f"M√©todo de transcri√ß√£o: {result.get('transcript_method', 'N/A')}")
            print(result)
        else:
            print(f"‚ùå API retornou status: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå API n√£o est√° rodando. Execute 'python app.py' primeiro.")

if __name__ == "__main__":
    print("üß™ Testando a API de An√°lise de V√≠deos do YouTube (YouTube Transcript API)\n")
    
    print("1. Testando se a API est√° funcionando...")
    test_health()
    
    print("\n2. Testando obten√ß√£o de transcri√ß√£o apenas...")
    test_transcript_only()
    
    print("\n3. Testando an√°lise completa de v√≠deo...")
    test_api()